#!/bin/bash

set -e  # Exit immediately if a command exits with a non-zero status

DOTFILES_DIR="./dotfiles"
HOME_DIR="$HOME"
CONFIG_DIR="$HOME/.config"

# Function to print colored output
print_colored() {
    echo -e "\e[1;34m$1\e[0m"
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to prompt user for yes/no input
prompt_yes_no() {
    while true; do
        read -p "$1 (y/n): " yn
        case $yn in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer yes or no.";;
        esac
    done
}

# Update package lists
print_colored "Updating package lists..."
sudo apt update

# Install packages from requirements file
print_colored "Installing packages..."
if [ -f "./requirements.txt" ]; then
    while IFS= read -r package || [[ -n "$package" ]]; do
        if ! dpkg -s "$package" >/dev/null 2>&1; then
            sudo apt install -y "$package"
        else
            print_colored "$package is already installed. Skipping..."
        fi
    done < "./requirements.txt"
else
    print_colored "Warning: requirements.txt not found. Skipping package installation."
fi

# Create local bin folder
print_colored "Creating local bin folder..."
mkdir -p ~/.local/bin

# Function to copy files and directories
copy_items() {
    local source_dir="$1"
    local dest_dir="$2"

    for item in "$source_dir"/{.,}*; do
        local basename=$(basename "$item")
        if [[ "$basename" != "." && "$basename" != ".." ]]; then
            if [ -f "$item" ]; then
                mkdir -p "$(dirname "$dest_dir/$basename")"
                cp "$item" "$dest_dir/$basename"
                print_colored "Copied $basename to $dest_dir"
            elif [ -d "$item" ]; then
                mkdir -p "$dest_dir/$basename"
                copy_items "$item" "$dest_dir/$basename"
            fi
        fi
    done
}

# Copy dotfiles
print_colored "Copying dotfiles..."
if [ -d "$DOTFILES_DIR" ]; then
    copy_items "$DOTFILES_DIR" "$HOME_DIR"
else
    print_colored "Warning: $DOTFILES_DIR directory not found. Skipping dotfile installation."
fi

# Copy Neovim config
print_colored "Copying Neovim config..."
if [ -d "$DOTFILES_DIR/.config/nvim" ]; then
    mkdir -p "$CONFIG_DIR/nvim"
    copy_items "$DOTFILES_DIR/.config/nvim" "$CONFIG_DIR/nvim"
else
    print_colored "Warning: Neovim config not found in $DOTFILES_DIR/.config/nvim. Skipping."
fi

# Run installation scripts
print_colored "Running installation scripts..."
if [ -d "./scripts" ]; then
    for script in ./scripts/*; do
        if [ -f "$script" ] && [ -x "$script" ]; then
            print_colored "Running $(basename "$script")..."
            "$script"
        fi
    done
else
    print_colored "Warning: ./scripts directory not found. Skipping custom installations."
fi

# Setup git
print_colored "Setting up git..."
read -p "Git display name: " git_name
read -p "Git email: " git_email

git config --global user.name "$git_name"
git config --global user.email "$git_email"
git config --global init.defaultBranch "main"
git config --global pull.rebase false
git config --global core.editor "nvim"

# Change shell to zsh
if prompt_yes_no "Do you want to change your default shell to zsh?"; then
    print_colored "Changing shell to zsh..."
    if command_exists zsh; then
        chsh -s "$(which zsh)" "$USER"
        print_colored "Shell changed to zsh. Please log out and log back in for the changes to take effect."
    else
        print_colored "Error: zsh is not installed. Please install it first."
    fi
fi

print_colored "Setup complete!"
