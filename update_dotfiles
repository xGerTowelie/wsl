#!/bin/bash

set -e  # Exit immediately if a command exits with a non-zero status

DOTFILES_DIR="./dotfiles"
HOME_DIR="$HOME"
CONFIG_DIR="$HOME/.config"
ENCRYPTED_KEY="$DOTFILES_DIR/encrypted_id_ed25519.gpg"
SSH_KEY="$HOME/.ssh/id_ed25519"

# Function to print colored output
print_colored() {
    local color_code="$1"
    shift
    echo -e "\e[${color_code}m$*\e[0m"
}

# Function to prompt user for yes/no input
prompt_yes_no() {
    while true; do
        read -p "$1 (y/n): " yn
        case $yn in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer yes or no.";;
        esac
    done
}

# Function to check and potentially encrypt SSH key
check_ssh_key() {
    if [ -f "$SSH_KEY" ] && [ ! -f "$ENCRYPTED_KEY" ]; then
        print_colored "1;33" "Unencrypted SSH key found. Do you want to encrypt it?"
        if prompt_yes_no "Encrypt SSH key?"; then
            gpg --symmetric --cipher-algo AES256 --output "$ENCRYPTED_KEY" "$SSH_KEY"
            print_colored "1;32" "SSH key encrypted and saved to $ENCRYPTED_KEY"
        fi
    elif [ -f "$ENCRYPTED_KEY" ]; then
        # Check if the encrypted key is newer than the unencrypted key
        if [ "$ENCRYPTED_KEY" -nt "$SSH_KEY" ]; then
            GLOBAL_REPO_TO_HOME+=(".ssh/id_ed25519")
        elif [ "$SSH_KEY" -nt "$ENCRYPTED_KEY" ]; then
            print_colored "1;33" "SSH key has been modified. Do you want to re-encrypt it?"
            if prompt_yes_no "Re-encrypt SSH key?"; then
                gpg --symmetric --cipher-algo AES256 --output "$ENCRYPTED_KEY" "$SSH_KEY"
                print_colored "1;32" "SSH key re-encrypted and saved to $ENCRYPTED_KEY"
            fi
        fi
    fi
}

# Function to compare files and directories
compare_items() {
    local source_dir="$1"
    local dest_dir="$2"
    local prefix="$3"
    local home_to_repo=()
    local repo_to_home=()
    local max_length=0

    while IFS= read -r -d '' item; do
        local basename=$(basename "$item")
        local relative_path="${item#$source_dir/}"
        local dest_item="$dest_dir/$relative_path"

        # Update max_length
        if (( ${#relative_path} > max_length )); then
            max_length=${#relative_path}
        fi

        if [[ -f "$item" ]]; then
            if [[ -f "$dest_item" ]]; then
                if ! cmp -s "$item" "$dest_item"; then
                    if [[ "$dest_item" -nt "$item" ]]; then
                        home_to_repo+=("$relative_path")
                    else
                        repo_to_home+=("$relative_path")
                    fi
                fi
            else
                repo_to_home+=("$relative_path")
            fi
        elif [[ -d "$item" && ! "$basename" == "." && ! "$basename" == ".." ]]; then
            compare_items "$item" "$dest_dir/$basename" "$prefix$relative_path/"
        fi
    done < <(find "$source_dir" -print0)

    # Display results
    if [ ${#home_to_repo[@]} -eq 0 ] && [ ${#repo_to_home[@]} -eq 0 ]; then
        return
    fi

    for file in "${home_to_repo[@]}"; do
        printf "\e[1;33m%-*s -> repo/%s%s\e[0m\n" "$max_length" "$prefix$file" "$prefix" "$file"
    done
    for file in "${repo_to_home[@]}"; do
        printf "\e[1;33m%-*s <- repo/%s%s\e[0m\n" "$max_length" "$prefix$file" "$prefix" "$file"
    done

    # Add to global arrays
    GLOBAL_HOME_TO_REPO+=("${home_to_repo[@]/#/$prefix}")
    GLOBAL_REPO_TO_HOME+=("${repo_to_home[@]/#/$prefix}")
}

# Function to sync changes
sync_changes() {
    if [ ${#GLOBAL_HOME_TO_REPO[@]} -eq 0 ] && [ ${#GLOBAL_REPO_TO_HOME[@]} -eq 0 ]; then
        print_colored "1;32" "No changes detected."
        return
    fi

    print_colored "1;34" "Changes detected:"
    for file in "${GLOBAL_HOME_TO_REPO[@]}"; do
        echo -e "\e[1;33m$file -> repo/$file\e[0m"
    done
    for file in "${GLOBAL_REPO_TO_HOME[@]}"; do
        echo -e "\e[1;33m$file <- repo/$file\e[0m"
    done

    if prompt_yes_no "Do you want to apply all these changes?"; then
        for file in "${GLOBAL_HOME_TO_REPO[@]}"; do
            mkdir -p "$(dirname "$DOTFILES_DIR/$file")"
            cp "$HOME_DIR/$file" "$DOTFILES_DIR/$file"
            print_colored "1;32" "Updated repo/$file"
        done

        for file in "${GLOBAL_REPO_TO_HOME[@]}"; do
            mkdir -p "$(dirname "$HOME_DIR/$file")"
            cp "$DOTFILES_DIR/$file" "$HOME_DIR/$file"
            print_colored "1;32" "Updated ~/$file"
        done

        print_colored "1;32" "All changes applied successfully."
    else
        print_colored "1;31" "No changes were applied."
    fi
}

# Check if dotfiles directory exists
if [[ ! -d "$DOTFILES_DIR" ]]; then
    print_colored "1;31" "Error: $DOTFILES_DIR directory not found."
    exit 1
fi

# Initialize global arrays
GLOBAL_HOME_TO_REPO=()
GLOBAL_REPO_TO_HOME=()

# Check SSH key before main comparison
check_ssh_key

# Compare dotfiles
compare_items "$DOTFILES_DIR" "$HOME_DIR" ""

# Compare Neovim config
if [[ -d "$DOTFILES_DIR/.config/nvim" ]]; then
    compare_items "$DOTFILES_DIR/.config/nvim" "$CONFIG_DIR/nvim" ".config/nvim/"
fi

# Sync changes
sync_changes
